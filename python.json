{
  // Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "logger basic": {
    "prefix": "basic config",
    "body": ["logging.basicConfig(stream=sys.stdout, level=${1:logging.INFO})"],
    "description": "logger basic"
  },

  "logs error to a file": {
    "prefix": "error logger",
    "body": [
      "    formatter = logging.Formatter(",
      "        \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"",
      "    )",
      "    file_handler = logging.FileHandler(filename=\"error.log\")",
      "    file_handler.setFormatter(formatter)",
      "    file_handler.setLevel(logging.ERROR)",
      "",
      "    stdout_handler = logging.StreamHandler(sys.stdout)",
      "    stdout_handler.setFormatter(formatter)",
      "",
      "    logging.basicConfig(",
      "        level=logging.INFO,",
      "        handlers=[stdout_handler, file_handler],",
      "    )"
    ],
    "description": "logs error to a file"
  },

  "Split a string on multiple delimiters with delim excluded": {
    "prefix": "split a string, delim excluded",
    "body": ["re.split(r'${1:[+-*/]}', ${2:\"a + b - c / d * e\"})"],
    "description": "Split a string on multiple delimiters with delim excluded"
  },

  "Split a string on multiple delimiters with delims included": {
    "prefix": "split delim included",
    "body": [
      "    re.split(r\"${1:(\\/|\\*|\\+|\\=|\\-)}\", \"${2:a=b-1/5*4}\")"
    ],
    "description": "Split a string on multiple delimiters with delims included"
  },

  "filter sequence using list": {
    "prefix": "filter sequence using list",
    "body": [
      "${1:mylist} = [${2:1, 4, -5, 10, -7, 2, 3, -1}]",
      "${3:example} = [n for n in ${4:mylist} if n > 0]"
    ],
    "description": "filter sequence using list"
  },

  "filter sequence using generator": {
    "prefix": "filter sequence using generator",
    "body": ["${1:example} = (n for n in ${2:mylist} ${3:if n > 0})"],
    "description": "filter sequence using generator"
  },

  "Write data in a file with json format": {
    "prefix": "file writer json",
    "body": [
      "with open(${1:\"data.json\"}, \"w\") as f:",
      "        json.dump(${2:data}, f)"
    ],
    "description": "Write a data in a file with json format"
  },

  "Read data from json file": {
    "prefix": "file reader json",
    "body": ["with open(${1:'data.json'}, 'r') as f:", "  data = json.load(f)"],
    "description": "Read data from json file"
  },

  "read a csv as a dictionary with importlib resource": {
    "prefix": "file read as a dictionary",
    "body": [
      "try:",
      "  with importlib.resources.path(${1:__package__}, ${2:file_name}) as path:",
      "  with open(path, \"r\") as f:",
      "  cdict = csv.DictReader(f)",
      "except FileNotFoundError:",
      "        raise RuntimeError(\"Can't read {${3:file_name}} in {${4:__package__}} directory\")"
    ],
    "description": "read a csv as a dictionary with importlib resource"
  },

  "Iterates remembers the last element iterated": {
    "prefix": "Iterator for current and last elment",
    "body": [
      "class ${1:NexlIterator}:",
      "    \"\"\"",
      "    Iterator maintains the state of",
      "    current and last element traversed",
      "    \"\"\"",
      "",
      "    def __init__(self, nodes):",
      "        self.nodes = iter(nodes)",
      "        self.last = None",
      "        self.next = next(self.nodes)",
      "",
      "    def __iter__(self):",
      "        return self",
      "",
      "    def __next__(self):",
      "        self._step()",
      "        return self.next, self.last",
      "",
      "    def _step(self):",
      "        self.last, self.next = self.next, next(self.nodes)"
    ],
    "description": "Iterates remembers the last element iterated"
  },

  "Unit Test Class": {
    "prefix": "unit-test",
    "body": [
      "class Test${1:Name}(unittest.TestCase):",
      "    \"\"\"${2:What does it test?} \"\"\"",
      "",
      "    def setUp(self):",
      "        ${3:pass}",
      "",
      "    def test_${4:reader}(self):",
      "        ${5:pass}"
    ],
    "description": "Creates a unit Test Class"
  },

  "Permutations order matter": {
    "prefix": "Permutation",
    "body": [
      "${1:from itertools import permutations}",
      "for p in permutations(${2:['a', 'b', 'c']}):",
      "  print(p)"
    ],
    "description": "Permutations order doesn't matter"
  },

  "Combination order doesn't matter": {
    "prefix": "Combinations",
    "body": [
      "${1:from itertools import combinations}",
      "for p in combinations(${2:['a', 'b', 'c']}, ${3:2}):",
      "  print(p)"
    ],
    "description": "Combination order doesn't matter"
  },

  "Zip longest": {
    "prefix": "Zip two list with unequal length",
    "body": [
      "${1:from itertools import zip_longest}",
      "for i in zip_longest(${2:[1, 2, 3]}, ${3:[4, 5]}, fillvalue=0):",
      "  print(i)"
    ],
    "description": "Zip longest"
  },
  "Simplify intialization": {
    "prefix": "Init Structure",
    "body": [
      "class ${1:Structure}:",
      "  _fields= []",
      "  def __init__(self, *args):",
      "    if len(args) != len(self._fields):",
      "      raise TypeError('Expected {} arguments'.format(len(self._fields)))",
      "    for name, value in zip(self._fields, args):",
      "      setattr(self, name, value)",
      "",
      "class ${2:Stock}(${3:Structure}):",
      " _fields = [${4:'name'}, ${5:'shares'}, ${6:'price'}]",
      ""
    ],
    "description": "Simplify intialization"
  },

  "Structure 2": {
    "prefix": "Init Structure 2",
    "body": [
      "class Structure:",
      "    \"\"\"Initialize child class\"\"\"",
      "    _fields = []",
      "",
      "    def __init__(self, *args, **kwargs):",
      "        if len(args) > len(self._fields):",
      "            raise TypeError('Expected {} arguments'.format(len(self._fields)))",
      "",
      "        for name, value in zip(self._fields, args):",
      "            setattr(self, name, value)",
      "",
      "        for name in self._fields[len(args):]:",
      "            setattr(self, name, kwargs.pop(name))",
      "",
      "        if kwargs:",
      "            raise TypeError(f\"Invalid Argument(s): {','.join(kwargs)}\")"
    ],
    "description": "Initialize class with args and dictionary"
  },

  "Request auth": {
    "prefix": "Auth request",
    "body": [
      "import requests",
      "resp = requests.get(${1:'http://pypi.python.org/pypi?:action=login'}, auth=${2:('user','password')})",
      ""
    ],
    "description": "Request auth"
  },

  "Pass cookies to request ": {
    "prefix": "Cookies request response",
    "body": [
      "resp1 = requests.get(${1:url})",
      "# Second requests with cookies received on first requests",
      "resp2 = requests.get(${2:url}, cookies=resp1.cookies)",
      "",
      ""
    ],
    "description": "Pass cookies to request "
  },
  "upload file request": {
    "prefix": "Upload file",
    "body": [
      "import requests",
      "url = '${1:http://httpbin.org/post}'",
      "files = { 'file': (\"${2:data.csv}\", open('${3:data.csv}', ${4:'rb'})) }",
      "r = requests.post(${5:url}, files=files)",
      "",
      ""
    ],
    "description": "upload file request"
  },
  "Regex tokenizer": {
    "prefix": "tokenizer",
    "body": [
      "${1:DEC} = rf\"(?P<${2:DEC}>${3:\\.\\d+})\"",
      "pattern = re.compile(\"|\".join([${3:DEC}]))",
      "",
      "for mo in re.finditer(pattern, ${1:string}):",
      "  type = mo.lastgroup",
      "  value = mo.group()",
      "  ",
      ""
    ],
    "description": "Regex tokenizer"
  },
  "if": {
    "prefix": "if",
    "body": ["if ${1:expression}:", "\t${2:pass}"],
    "description": "Code snippet for an if statement"
  },
  "if/else": {
    "prefix": "if/else",
    "body": ["if ${1:condition}:", "\t${2:pass}", "else:", "\t${3:pass}"],
    "description": "Code snippet for an if statement with else"
  },
  "elif": {
    "prefix": "elif",
    "body": ["elif ${1:expression}:", "\t${2:pass}"],
    "description": "Code snippet for an elif"
  },
  "else": {
    "prefix": "else",
    "body": ["else:", "\t${1:pass}"],
    "description": "Code snippet for an else"
  },
  "while": {
    "prefix": "while",
    "body": ["while ${1:expression}:", "\t${2:pass}"],
    "description": "Code snippet for a while loop"
  },
  "while/else": {
    "prefix": "while/else",
    "body": ["while ${1:expression}:", "\t${2:pass}", "else:", "\t${3:pass}"],
    "description": "Code snippet for a while loop with else"
  },
  "for": {
    "prefix": "for",
    "body": ["for ${1:target_list} in ${2:expression_list}:", "\t${3:pass}"],
    "description": "Code snippet for a for loop"
  },
  "for/else": {
    "prefix": "for/else",
    "body": [
      "for ${1:target_list} in ${2:expression_list}:",
      "\t${3:pass}",
      "else:",
      "\t${4:pass}"
    ],
    "description": "Code snippet for a for loop with else"
  },
  "try/except": {
    "prefix": "try/except",
    "body": [
      "try:",
      "\t${1:pass}",
      "except ${2:expression} as ${3:identifier}:",
      "\t${4:pass}"
    ],
    "description": "Code snippet for a try/except statement"
  },
  "try/finally": {
    "prefix": "try/finally",
    "body": ["try:", "\t${1:pass}", "finally:", "\t${2:pass}"],
    "description": "Code snippet for a try/finally statement"
  },
  "try/except/else": {
    "prefix": "try/except/else",
    "body": [
      "try:",
      "\t${1:pass}",
      "except ${2:expression} as ${3:identifier}:",
      "\t${4:pass}",
      "else:",
      "\t${5:pass}"
    ],
    "description": "Code snippet for a try/except/else statement"
  },
  "try/except/finally": {
    "prefix": "try/except/finally",
    "body": [
      "try:",
      "\t${1:pass}",
      "except ${2:expression} as ${3:identifier}:",
      "\t${4:pass}",
      "finally:",
      "\t${5:pass}"
    ],
    "description": "Code snippet for a try/except/finally statement"
  },
  "try/except/else/finally": {
    "prefix": "try/except/else/finally",
    "body": [
      "try:",
      "\t${1:pass}",
      "except ${2:expression} as ${3:identifier}:",
      "\t${4:pass}",
      "else:",
      "\t${5:pass}",
      "finally:",
      "\t${6:pass}"
    ],
    "description": "Code snippet for a try/except/else/finally statement"
  },
  "with": {
    "prefix": "with",
    "body": ["with ${1:expression} as ${2:target}:", "\t${3:pass}"],
    "description": "Code snippet for a with statement"
  },
  "def": {
    "prefix": "def",
    "body": [
      "def ${1:funcname}(${2:parameter_list}):",
      "\t\"\"\"",
      "\t${3:docstring}",
      "\t\"\"\"",
      "\t${4:pass}"
    ],
    "description": "Code snippet for a function definition"
  },
  "def(class method)": {
    "prefix": "def(class method)",
    "body": [
      "def ${1:funcname}(self, ${2:parameter_list}):",
      "\t\"\"\"",
      "\t${3:docstring}",
      "\t\"\"\"",
      "\t${4:pass}"
    ],
    "description": "Code snippet for a class method"
  },
  "def(static class method)": {
    "prefix": "def(static class method)",
    "body": [
      "@staticmethod",
      "def ${1:funcname}(${2:parameter_list}):",
      "\t\"\"\"",
      "\t${3:docstring}",
      "\t\"\"\"",
      "\t${4:pass}"
    ],
    "description": "Code snippet for a static class method"
  },
  "def(abstract class method)": {
    "prefix": "def(abstract class method)",
    "body": [
      "def ${1:funcname}(self, ${2:parameter_list}):",
      "\t\"\"\"",
      "\t${3:docstring}",
      "\t\"\"\"",
      "\traise NotImplementedError"
    ],
    "description": "Code snippet for an abstract class method"
  },
  "class": {
    "prefix": "class",
    "body": [
      "class ${1:classname}(${2:object}):",
      "\t\"\"\"",
      "\t${3:docstring}",
      "\t\"\"\"",
      "\t${4:pass}"
    ],
    "description": "Code snippet for a class definition"
  },
  "lambda": {
    "prefix": "lambda",
    "body": ["lambda ${1:parameter_list}: ${2:expression}"],
    "description": "Code snippet for a lambda statement"
  },
  "if(main)": {
    "prefix": "__main__",
    "body": ["if __name__ == \"__main__\":", "    ${1:pass}"],
    "description": "Code snippet for a `if __name__ == \"__main__\": ...` block"
  },
  "async/def": {
    "prefix": "async/def",
    "body": ["async def ${1:funcname}(${2:parameter_list}):", "\t${3:pass}"],
    "description": "Code snippet for an async statement"
  },
  "async/for": {
    "prefix": "async/for",
    "body": ["async for ${1:target} in ${2:iter}:", "\t${3:block}"],
    "description": "Code snippet for an async for statement"
  },
  "async/for/else": {
    "prefix": "async/for/else",
    "body": [
      "async for ${1:target} in ${2:iter}:",
      "\t${3:block}",
      "else:",
      "\t${4:block}"
    ],
    "description": "Code snippet for an async for statement with else"
  },
  "async/with": {
    "prefix": "async/with",
    "body": ["async with ${1:expr} as ${2:var}:", "\t${3:block}"],
    "description": "Code snippet for an async with statement"
  },
  "ipdb": {
    "prefix": "ipdb",
    "body": "import ipdb; ipdb.set_trace()",
    "description": "Code snippet for ipdb debug"
  },
  "pdb": {
    "prefix": "pdb",
    "body": "import pdb; pdb.set_trace()",
    "description": "Code snippet for pdb debug"
  },
  "pudb": {
    "prefix": "pudb",
    "body": "import pudb; pudb.set_trace()",
    "description": "Code snippet for pudb debug"
  }
}
